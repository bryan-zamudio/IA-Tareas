En este código creamos un solucionador para el juego de puzzle 8, utilizando como heurística la distancia Manhattan, y usando el algoritmo estrella para recorrer los nodos. Para lograr esto, utilizamos varias funciones. En primer lugar está la función para calcular la distancia Manhattan (dist_Manhattan), el cual convierte los valores de ambas listas (actual y resuelta) en coordenadas 'x' y 'y', con el propósito de sumar los valores absolutos de sus restas para obtener la distancia. Otra función que hicimos, sin embargo no usamos mucho, fue el de dist_Cuadros, el cual usa una heurística menos eficiente; básicamente cuenta los cuadros que estén en una posición errónea, usa la misma forma de la función anterior de convertir la lista en coords. Otra función es ver_Vecinos, la cual crea una lista de vecinos y verifica los movimientos válidos para el espacio vacío, mediante el uso de un diccionario y varias condiciones; al terminar, regresa una tupla con los estados que son vecinos. La siguiente función es en donde se pone más interesante, la función a_Estrella, como su nombre lo indica, es un algoritmo a estrella para recorrer la lista de los vecinos basándose en su costo total; para lograr esto, primero se crea una lista donde se guardan tuplas conteniendo el costo total (f), el costo para llegar (g), el estado actual y el camino seguido. Usando esta lista, podemos guardar todos los estados que no hayan sido explorados hasta el momento, dentro de un while, mientras haya nodos no explorados, se ejecutará lo siguiente: primero se encuentra el nodo con el costo total mínimo, después se remueve de la lista de posibles y se añade a la lista de explorados, luego se ve cada vecino del nodo, se calculan sus costos y se añaden a la lista de posibles. Así, de esta manera, siempre y cuando sigan habiendo nodos posibles (no explorados), se seguirán explorando los nodos restantes, priorizando el de menor costo, hasta o encontrar la solución, o determinar que no hay solución después de 10000 ciclos. El resto del código es una función (print_Puzzle) para imprimir el puzzle en forma de tablero 3x3, y un menú para seleccionar la heurística que se quiere usar. Al ejecutarlo, nos muestra todos los nodos que se exploran y su profundidad, seguido por el camino óptimo de estados hasta la solución que se encontró.
